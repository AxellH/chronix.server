sonarqube {
    properties {
        property "sonar.projectName", "de.qaware.chronix:chronix-server-test-integration"
    }
}

dependencies {
    testCompile 'org.apache.commons:commons-lang3:3.1'
    testCompile 'commons-codec:commons-codec:1.10'
    testCompile 'org.apache.solr:solr-solrj:6.2.1'

    testCompile 'de.qaware.chronix:chronix-api:0.1'
    testCompile 'de.qaware.chronix:chronix-kassiopeia-simple:0.3.9-beta'
    testCompile 'de.qaware.chronix:chronix-kassiopeia-simple-converter:0.3.9-beta'
    testCompile 'de.qaware.chronix:chronix-kassiopeia-common:0.3.9-beta'


    testCompile project(':chronix-server-client')
    testCompile project(':chronix-server-test-extensions')

    testCompile project(':chronix-server-query-handler')
    testCompile project(':chronix-server-retention')
}
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {

    inceptionYear '2015'

    scm {
        connection "scm:git:${project.scmUrl}"
        developerConnection "scm:git:${project.scmUrl}"
        url project.websiteUrl
    }

    issueManagement {
        system 'GitHub'
        url project.issueTrackerUrl
    }

    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    organisation {
        name 'QAware GmbH'
        url 'https://www.qaware.de'
    }

    developers {
        developer {
            id 'florianlautenschlager'
            name 'Florian Lautenschlager'
            email 'florian.lautenschlager@qaware.de'
            organization 'QAware GmbH'
            organizationUrl 'https://www.qaware.de'
            roles { role 'Developer' }
        }
    }
}

publishing {
    publications {
        chronixTestIntegration(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('name', project.displayName)
                asNode().appendNode('description', project.description)
                asNode().appendNode('url', project.websiteUrl)

                asNode().children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.bintrayUsername : 'unknown'
    key = project.hasProperty('bintrayApiKey') ? project.bintrayApiKey : 'unknown'
    publications = ['chronixTestIntegration']
    dryRun = false
    publish = true
    pkg {
        repo = project.bintrayRepo
        name = project.name
        desc = project.description
        licenses = ['Apache-2.0']
        labels = ['java', 'time series', 'chronix', 'server']
        websiteUrl = project.websiteUrl
        issueTrackerUrl = project.issueTrackerUrl
        vcsUrl = project.scmUrl
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = project.description
            released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
            vcsTag = "v${project.version}"
            attributes = [
                    'chronix-server-test-integration': ['de.qaware.chronix', project.group, project.name].join(':')
            ]
            mavenCentralSync {
                sync = false
            }
        }
    }
}

pluginBundle {
    website = project.websiteUrl
    vcsUrl = project.scmUrl

    plugins {
        basePlugin {
            id = 'de.qaware.chronix'
            displayName = project.displayName
            description = project.description
            tags = ['chronix', 'time series database', 'retention']
            version = project.version
        }
    }
}


import de.undercouch.gradle.tasks.download.Download

def solrVersion = "6.2.1"

//Apache archive
//"http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip"
task downloadZipFile(type: Download) {
    onlyIfNewer true
    src "http://archive.apache.org/dist/lucene/solr/${solrVersion}/solr-${solrVersion}.zip"
    dest new File(buildDir, "solr-${solrVersion}.zip")
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into buildDir
}
task copyCoreToSolr(dependsOn: downloadAndUnzipFile, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr"
    from "$projectDir/src/test/resources/de/qaware/chronix/solr"
}
/**
 * Enable CORS per default otherwise Grafana won't work.
 */
task copyWEBXMLToSolr(dependsOn: copyCoreToSolr, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr-webapp/webapp/WEB-INF/"
    from "$projectDir/src/test/resources/de/qaware/chronix/solr-webapp/webapp/WEB-INF/"
}
/**
 * Copy the modified contexts to activate gzip
 */
task copyContextsWithGZIP(dependsOn: copyWEBXMLToSolr, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/contexts/"
    from "$projectDir/src/test/resources/de/qaware/chronix/contexts/"
}
/**
 * Copy the related jetty ssl with the gzip stuff
 */
task copyJettySSL(dependsOn: copyContextsWithGZIP, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/etc/"
    from "$projectDir/src/test/resources/de/qaware/chronix/etc/"
}


task copyIntegrationRuntimeLibs(dependsOn: copyJettySSL, type: Copy) {
    into "$buildDir/solr-${solrVersion}/server/solr/chronix/lib"
    from(configurations)
    include("*chronix-api*.jar")
    include("*chronix-kassiopeia*.jar")
    include("*chronix-server-query*.jar")
    include("*chronix-server-retention.jar")
    include("*chronix.fastdtw-*.jar")
    include("*commons-lang3-*.jar")
    include("*quartz*.jar")
    include("*gson*.jar")
    include("*proto*.jar")
}

processTestResources.dependsOn copyIntegrationRuntimeLibs

/**
 * Helper task
 */
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}

/**
 * Tasks to start and stop solr
 */
String osName = System.getProperty("os.name").toLowerCase();
task startSolr(dependsOn: copyIntegrationRuntimeLibs, type: ExecWait) {
    if (osName.contains("windows")) {
        command 'cmd.exe /C solr.cmd start -p 8913'
        ready "Started Solr server on port 8913. Happy searching!"
        directory "$buildDir/solr-${solrVersion}/bin/"
    } else {
        command 'bash solr start -p 8913'
        ready "Started Solr server on port 8913. Happy searching!"
        directory "$buildDir/solr-${solrVersion}/bin/"
    }
}

task stopSolr(type: ExecWait) {
    if (osName.contains("windows")) {
        command 'cmd.exe /C solr.cmd stop -p 8913'
        ready ""
        directory "$buildDir/solr-${solrVersion}/bin/"
    } else {
        command 'bash solr stop -p 8913'
        ready ""
        directory "$buildDir/solr-${solrVersion}/bin/"
    }
}

task deleteUnusedDirs(type: Delete) {

    sleep(30_000)
    //delete the following dirs
    def solrDir = "$buildDir/solr-${solrVersion}/"

    delete "$solrDir/docs"
    delete "$solrDir/example"
    delete "$solrDir/dist/solrj-lib"
    delete "$solrDir/dist/test-framework"
    delete "$solrDir/dist/solr-solrj-${solrVersion}.jar"
    delete "$solrDir/dist/solr-test-framework-${solrVersion}.jar"

    delete fileTree("$solrDir/server/logs").include("**/*")
    delete "$solrDir/server/solr/configsets"
    delete fileTree("$solrDir/server/solr").include("hsperfdata*")
}


task buildRelease(dependsOn: deleteUnusedDirs, type: Zip) {
    def solrDir = "$buildDir/solr-${solrVersion}/"
    from("$solrDir")
    into "chronix-solr-${solrVersion}" // note that this specifies path *in* the archive
    destinationDir file("chronix-${project.version}") // directory that you want your archive to be placed in
    baseName = "chronix"
}

test.dependsOn startSolr

test.finalizedBy stopSolr
